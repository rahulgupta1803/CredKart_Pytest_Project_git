{
  "uid" : "7c05fce7eb7fba8e",
  "name" : "test_shopclues_login01[shopclue_login_data4]",
  "fullName" : "test_shopclues_login.Test_shopclues#test_shopclues_login01",
  "historyId" : "3be7fbfb62b01c29f7e7ffda9dc04313",
  "time" : {
    "start" : 1690964290705,
    "stop" : 1690964311867,
    "duration" : 21162
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: assert False",
  "statusTrace" : "self = <test_shopclues_login.Test_shopclues object at 0x0000022D6D1297D0>\ncomm_file = <selenium.webdriver.firefox.webdriver.WebDriver (session=\"a18f96be-33c1-4aa8-bb38-7b16e5ab6b80\")>\nshopclue_login_data = ('rahul.ip@gmail.com', 'rahul1803sarrda@#')\n\n    def test_shopclues_login01(self,comm_file,shopclue_login_data):\n        self.driver = comm_file\n        self.driver.find_element(By.XPATH, \"//a[normalize-space()='Sign In']\").click()\n        time.sleep(2)\n        self.driver.find_element(By.XPATH, \"/html/body/div[1]/div/div/div[3]/div[1]/button[1]\").click()\n        self.driver.find_element(By.XPATH, \"//span[normalize-space()='Continue with Facebook']\").click()\n        self.driver.find_element(By.XPATH, \"//input[@id='email']\").send_keys(shopclue_login_data[0])\n        self.driver.find_element(By.XPATH, \"//input[@id='pass']\").send_keys(shopclue_login_data[1])\n        self.driver.find_element(By.XPATH, \"//button[@id='loginbutton']\").click()\n        try:\n            time.sleep(10)\n>           self.driver.find_element(By.XPATH, \"/html/body/div[1]/div/div/div[3]/div[1]/button[1]\").click()\n\ntest_shopclues_login.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\Admin\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:739: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nC:\\Users\\Admin\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000022D6D6AE810>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"Unable to locate element: /html/body/div[1]/d.../content/shared/webdriver/Errors.sys.mjs:505:5\\\\ndom.find/</<@chrome://remote/content/shared/DOM.sys.mjs:132:16\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: Unable to locate element: /html/body/div[1]/div/div/div[3]/div[1]/button[1]; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nE       Stacktrace:\nE       RemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nE       WebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:187:5\nE       NoSuchElementError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:505:5\nE       dom.find/</<@chrome://remote/content/shared/DOM.sys.mjs:132:16\n\nC:\\Users\\Admin\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchElementException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_shopclues_login.Test_shopclues object at 0x0000022D6D1297D0>\ncomm_file = <selenium.webdriver.firefox.webdriver.WebDriver (session=\"a18f96be-33c1-4aa8-bb38-7b16e5ab6b80\")>\nshopclue_login_data = ('rahul.ip@gmail.com', 'rahul1803sarrda@#')\n\n    def test_shopclues_login01(self,comm_file,shopclue_login_data):\n        self.driver = comm_file\n        self.driver.find_element(By.XPATH, \"//a[normalize-space()='Sign In']\").click()\n        time.sleep(2)\n        self.driver.find_element(By.XPATH, \"/html/body/div[1]/div/div/div[3]/div[1]/button[1]\").click()\n        self.driver.find_element(By.XPATH, \"//span[normalize-space()='Continue with Facebook']\").click()\n        self.driver.find_element(By.XPATH, \"//input[@id='email']\").send_keys(shopclue_login_data[0])\n        self.driver.find_element(By.XPATH, \"//input[@id='pass']\").send_keys(shopclue_login_data[1])\n        self.driver.find_element(By.XPATH, \"//button[@id='loginbutton']\").click()\n        try:\n            time.sleep(10)\n            self.driver.find_element(By.XPATH, \"/html/body/div[1]/div/div/div[3]/div[1]/button[1]\").click()\n            self.driver.find_element(By.XPATH, \"//a[normalize-space()='Hi Rahul']\")\n            self.driver.find_element(By.XPATH,\"//div[@class='hoverContent sc_actLinks']//a[contains(text(),'Rahul')]\")\n            self.driver.save_screenshot(f\".//screenshots//{shopclue_login_data[0]}_{shopclue_login_data[1]} shopclues_login_pass01.PNG\")\n            print(\"shopclue login successfully\")\n            self.driver.close()\n            assert True\n        except:\n            print(\"shopclue login is unsuccessfull\")\n            self.driver.save_screenshot(f\".//screenshots//{shopclue_login_data[0]}_{shopclue_login_data[1]} shopcclues_login_fail01.PNG\")\n            self.driver.close()\n>           assert False\nE           assert False\n\ntest_shopclues_login.py:30: AssertionError",
  "flaky" : false,
  "beforeStages" : [ {
    "name" : "shopclue_login_data",
    "time" : {
      "start" : 1690964290704,
      "stop" : 1690964290704,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "comm_file",
    "time" : {
      "start" : 1690964278582,
      "stop" : 1690964290704,
      "duration" : 12122
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "suite",
    "value" : "test_shopclues_login"
  }, {
    "name" : "subSuite",
    "value" : "Test_shopclues"
  }, {
    "name" : "host",
    "value" : "DESKTOP-3IIDO4U"
  }, {
    "name" : "thread",
    "value" : "15096-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_shopclues_login"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "shopclue_login_data",
    "value" : "('rahul.ip@gmail.com', 'rahul1803sarrda@#')"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "7c05fce7eb7fba8e.json",
  "parameterValues" : [ "('rahul.ip@gmail.com', 'rahul1803sarrda@#')" ]
}